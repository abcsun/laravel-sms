{"name":"sms ","tagline":"sms send package for laravel","body":"# laravel-sms for laravel 5\r\n\r\n**使用场景**\r\n\r\n1. 发送短信验证码。\r\n2. 发送信息通知短信(如：订单通知，发货通知，上课通知...)。\r\n3. 特殊情况下用户收不到短信？ laravel-sms提倡通过备用代理器机制使用两个及两个以上服务商。\r\n\r\n**该包特性**\r\n\r\n1. 数据库记录/管理短信数据及其发送情况。\r\n2. 兼容模板短信和内容短信。\r\n3. [支持短信队列](https://github.com/toplan/laravel-sms#短信队列)。\r\n4. [备用代理器(服务商)机制](https://github.com/toplan/laravel-sms#备用代理器机制)。即:如果用一个服务商发送短信失败，将会自动尝试通过预先设置的备用服务商发送。\r\n5. 集成[验证码短信发送/校验模块](https://github.com/toplan/laravel-sms#验证码短信模块)，分分钟搞定验证码短信发送以及手机号/验证码校验，\r\n   从此告别重复写验证码短信发送与校验的历史。\r\n6. 支持语音验证码，使用方法见特性5。\r\n7. 集成如下第三方短信服务商，你也可[自定义代理器](https://github.com/toplan/laravel-sms#自定义代理器)。\r\n\r\n| 服务商 | 模板短信 | 内容短信 | 语音验证码 | 最低消费  |  最低消费单价 |\r\n| ----- | :-----: | :-----: | :------: | :-------: | :-----: |\r\n| [Luosimao](http://luosimao.com)        | no  | yes |  yes    |￥850(1万条) |￥0.085/条|\r\n| [云片网络](http://www.yunpian.com)       | no | yes  | yes    |￥55(1千条)  |￥0.055/条|\r\n| [容联·云通讯](http://www.yuntongxun.com) | yes | no  | yes    |充值￥500    |￥0.055/条|\r\n| [SUBMAIL](http://submail.cn)           | yes | no  | no      |￥100(1千条) |￥0.100/条|\r\n| [云之讯](http://www.ucpaas.com/)        | yes | no  | yes     |            |￥0.050/条|\r\n\r\n##安装\r\n在项目根目录下运行如下composer命令:\r\n```php\r\n   //安装稳定版本\r\n   composer require 'toplan/laravel-sms:~1.0.1'\r\n\r\n   //安装开发中版本\r\n   composer require 'toplan/laravel-sms:dev-master'\r\n```\r\n\r\n##快速上手\r\n\r\n####1.注册服务提供器\r\n\r\n在config/app.php文件中providers数组里加入：\r\n```php\r\n   //laravel 5.0.*\r\n   'Toplan\\Sms\\SmsManagerServiceProvider'\r\n   //laravel 5.1.*\r\n   Toplan\\Sms\\SmsManagerServiceProvider::class\r\n```\r\n\r\n在config/app.php文件中的aliases数组里加入\r\n```php\r\n   //laravel 5.0.*\r\n   'SmsManager' => 'Toplan\\Sms\\Facades\\SmsManager'\r\n   //laravel 5.1.*\r\n   'SmsManager' => Toplan\\Sms\\Facades\\SmsManager::class\r\n```\r\n\r\n####2.migration生成 & 参数配置\r\n\r\n   * 请先运行如下命令生成配置文件和migration文件\r\n```php\r\n   php artisan vendor:publish\r\n```\r\n\r\n   * 在数据库中生成sms表\r\n```php\r\n   php artisan migrate\r\n```\r\n\r\n   * 设置默认代理器(服务商)\r\n\r\n   请在config/laravel-sms.php中设置默认代理服务商，默认为'Luosimao'。\r\n```php\r\n   'agent' => 'Luosimao',\r\n```\r\n\r\n   * 配置代理服务商的相关参数\r\n\r\n   在config/laravel-sms.php中，找到你想要使用的代理器，并填写好配置信息。\r\n\r\n>  如果你使用的是Luosimao，请在数组'Luosimao'中按照提示填写配置信息\r\n>  ```php\r\n>     'Luosimao' => [\r\n>          ...\r\n>          'apikey' => 'your api key',\r\n>     ]\r\n>  ```\r\n\r\n   更多的服务商配置就不详说了，请到配置文件中查看并按提示修改相应代理服务商的配置。\r\n\r\n####3.Enjoy it! 使用Sms模型发送短信\r\n\r\n  在控制器中发送触发短信，如：\r\n```php\r\n  //只希望使用模板方式发送短信,可以不设置内容content (如云通讯,Submail)\r\n  Toplan\\Sms\\Sms::make($tempId)->to('1828****349')->data(['12345', 5])->send();\r\n\r\n  //只希望使用内容方式放送,可以不设置模板id和模板数据data (如云片,luosimao)\r\n  Toplan\\Sms\\Sms::make()->to('1828****349')->content('【Laravel SMS】亲爱的张三，欢迎访问，祝你工作愉快。')->send();\r\n\r\n  //同时确保能通过模板和内容方式发送。这样做的好处是，可以兼顾到各种代理器(服务商)！\r\n  Toplan\\Sms\\Sms::make([\r\n      'YunTongXun' => '123',\r\n      'SubMail'    => '123'\r\n  ])\r\n  ->to('1828****349')\r\n  ->data(['张三'])\r\n  ->content('【签名】亲爱的张三，欢迎访问，祝你工作愉快。')\r\n  ->send();\r\n```\r\n\r\n####4.常用的语法糖\r\n\r\n   * 发送给谁\r\n```php\r\n   $sms = $sms->to('1828*******');\r\n   $sms = $sms->to(['1828*******', '1828*******', ...]);//多个目标号码\r\n```\r\n\r\n   * 设置模板ID\r\n\r\n如果你只使用了默认代理器，即没有开启备用代理器机制。你只需要设置默认代理器的模板ID:\r\n```php\r\n   //静态方法设置，并返回sms实例\r\n   $sms = Toplan\\Sms\\Sms::make('20001');\r\n   //或\r\n   $sms = $sms->template('20001');\r\n```\r\n\r\n如果你要开启备用代理器机制，那么需要为只支持模板短信默认/备用代理器设置相应模板ID，这样才能保证这些代理器正常使用。可以这样设置:\r\n```php\r\n   //静态方法设置，并返回sms实例\r\n   $sms = Toplan\\Sms\\Sms::make(['YunTongXun' => '20001', 'SubMail' => 'xxx', ...]);\r\n   //设置指定服务商的模板id\r\n   $sms = $sms->template('YunTongXun', '20001')->template('SubMail' => 'xxx');\r\n   //一次性设置多个服务商的模板id\r\n   $sms = $sms->template(['YunTongXun' => '20001', 'SubMail' => 'xxx', ...]);\r\n```\r\n\r\n  * 设置模板短信的模板数据\r\n```php\r\n  $sms = $sms->data([\r\n        'code' => $code,\r\n        'minutes' => $minutes\r\n      ]);//must be array\r\n```\r\n\r\n  * 设置内容短信的内容\r\n\r\n  有些服务商(如YunPian,Luosimao)只支持内容短信(即直接发送短信内容)，不支持模板，那么就需要设置短信内容。\r\n```php\r\n  $sms = $sms->content('【签名】亲爱的张三，您的订单号是281xxxx，祝你购物愉快。');\r\n```\r\n\r\n  * 临时开启/关闭短信队列\r\n```php\r\n  $sms = $sms->openQueue();//开启队列,短信会在队列中排队\r\n  $sms = $sms->closeQueue();//关闭队列,短信会直接发送\r\n```\r\n\r\n  * 发送短信\r\n```php\r\n  $sms->send();//return true or false\r\n```\r\n\r\n##短信队列\r\n\r\n  在config/laravel-sms中修改配置\r\n```php\r\n   //开启队列为true, 关闭队列为false\r\n   'smsSendQueue' => true,\r\n```\r\n  如果你开启了队列，需要运行如下命名监听队列\r\n```php\r\n   php artisan queue:listen\r\n```\r\n\r\n##备用代理器机制\r\n  如果用一个服务商发送短信失败(如：欠费、频繁发送、发送次数上限、内容重复...)，将会自动尝试通过备用服务商发送。\r\n  在config/laravel-sms.php中配置备用代理器\r\n```php\r\n  'alternate' => [\r\n      //关闭备用代理器机制为false,打开为true\r\n      'enable' => false,\r\n      //备用代理器组，排名分先后，越在前面的代理器会优先使用\r\n      //example: ['YunPian', ...]\r\n      'agents' => []\r\n  ],\r\n```\r\n  其中agents中如果有多个值，如：A,B,C。\r\n  那么当默认代理器发送失败时，会自动启用A代理器，若A代理器发送失败，则会自动启用B，依次类推直到最后一个备用代理器。\r\n\r\n##验证码短信模块\r\n\r\n可以直接访问example.com/sms/info查看该模块是否可用，并可在该页面里观察验证码短信发送数据，方便你进行调试。\r\n\r\n####1.[浏览器端]请求发送带验证码短信\r\n\r\n该包已经封装好浏览器端的jquery/zepto插件，只需要为发送按钮添加扩展方法即可实现发送短信。\r\n```html\r\n  //js文件在laravel-sms包的js文件夹中，请复制到项目资源目录\r\n  <script src=\"/assets/js/jquery(zepto).laravel-sms.js\"></script>\r\n  <script>\r\n     $('#sendVerifySmsButton').sms({\r\n        //token value\r\n        token          : \"{{csrf_token()}}\",\r\n        //定义如何获取mobile的值\r\n        mobileSelector : 'input[name=\"mobile\"]',\r\n        //定义手机号的检测规则,当然你还可以到配置文件中自定义你想要的任何规则\r\n        mobileRule     : 'check_mobile_unique',\r\n        //是否请求语音验证码\r\n        voice          : false,\r\n        //定义服务器有消息返回时如何展示，默认为alert\r\n        alertMsg       :  function (msg, type) {\r\n            alert(msg);\r\n        },\r\n     });\r\n  </script>\r\n```\r\n> **注意:**\r\n> 如果你使用Luosimao语音验证码，请在配置文件中'Luosimao'中设置'voiceApikey'。\r\n\r\n####2.[服务器端]配置短信内容/模板\r\n\r\n配置文件: config/laravel-sms.php\r\n\r\n* 填写你的验证码短信内容或模板标示符\r\n\r\n> 如果你使用的是内容短信(如云片网络,Luosimao)，则使用或修改'verifySmsContent'的值：\r\n> ```php\r\n>    'verifySmsContent' => '【填写签名】亲爱的用户，您的验证码是%s。有效期为%s分钟，请尽快验证'\r\n> ```\r\n\r\n> 如果你使用模板短信(如云通讯,SubMail)，需要到相应代理器中填写模板标示符：\r\n> ```php\r\n>    'YunTongXun' => [\r\n>        //模板标示符\r\n>        'verifySmsTemplateId' => 'your template id',\r\n>    ]\r\n> ```\r\n\r\n* 修改或自定义发送前检测规则\r\n\r\n> ```php\r\n>    'rules' => [\r\n>        //唯一性检测规则\r\n>        'check_mobile_unique' => 'unique:users,mobile',//适用于注册\r\n>        //存在性检测规则\r\n>        'check_mobile_exists' => 'exists:users',//适用于找回密码和系统内业务验证\r\n>    ]\r\n> ```\r\n\r\n\r\n####3.[服务器端]合法性验证\r\n\r\n用户填写验证码并提交表单到服务器时，在你的控制器中需要验证手机号和验证码是否正确，你只需要加上如下代码即可：\r\n```php\r\n   //验证手机验证码\r\n   $validator = Validator::make(Input::all(), [\r\n        'mobile'     => 'required|mobile_changed',\r\n        'verifyCode' => 'required|verify_code|verify_rule:check_mobile_unique',\r\n        //more...\r\n   ]);\r\n   if ($validator->fails()) {\r\n       //验证失败的话需要清除session数据，防止用户多次试错\r\n       \\SmsManager::forgetSmsDataFromSession();\r\n       return redirect()->back()->withErrors($validator);\r\n   }\r\n```\r\n   PS:\r\n   * `mobile_changed` 验证用户手机号是否合法。\r\n   * `verify_code` 验证验证码是否合法(验证码是否正确，是否超时无效)。\r\n   * `verify_rule:{$mobileRule}` 检测是否为非法请求，第一值为手机号检测规则，必须和你在浏览器端js插件中填写的mobileRule的值一致。\r\n\r\n   *请在语言包中做好翻译。*\r\n\r\n##自助二次开发\r\n\r\n####1.自定义Model\r\n\r\n   继承model类(Toplan\\Sms\\Sms)\r\n```php\r\n  namespace App\\Models;\r\n  class MySmsModel extends Toplan\\Sms\\Sms {\r\n        //override\r\n        public function send()\r\n        {\r\n            //发送入口\r\n        }\r\n        //override\r\n        public function sendProcess()\r\n        {\r\n            //发送过程\r\n        }\r\n        //more functions...\r\n  }\r\n```\r\n 修改model类后需要在配置文件中，修改key为'smsModel'的值：\r\n```php\r\n   'smsModel' => 'App\\Models\\MySmsModel',\r\n```\r\n\r\n##自定义代理器\r\n\r\n欢迎贡献更多的代理器，这样就能支持更多第三方服务商的发送接口。请注意命名规范，Foo为代理器(服务商)名称。\r\n\r\n配置项加入到src/config/laravel-sms.php中：\r\n\r\n```php\r\n   'Foo' => [\r\n        'verifySmsTemplateId' => '',\r\n\r\n        'isResendFailedSmsInQueue' => false,\r\n\r\n        'xxx' => 'some info',\r\n        ...\r\n   ]\r\n```\r\n\r\n在agents目录下添加代理器类(注意类名为FooAgent),并继承Agent抽象类。如果使用到其他api，可以将api文件放入src/lib文件夹中。\r\n\r\n```php\r\n   namespace Toplan\\Sms;\r\n   class FooAgent extends Agent {\r\n        //override\r\n        //发送短信一级入口\r\n        public function sendSms($tempId, $to, Array $data, $content){\r\n           //在这个方法中调用二级入口\r\n           //根据你使用的服务商的接口选择调用哪个方式发送短信\r\n           $this->sendContentSms($to, $content);\r\n           $this->sendTemplateSms($tempId, $to, Array $data);\r\n        }\r\n\r\n        //override\r\n        //发送短信二级入口：发送内容短信\r\n        public function sendContentSms($to, $content)\r\n        {\r\n            //通过$this->config['key'],获取配置文件中的参数\r\n            $x = $this->config['xxx'];\r\n            $x = $this->xxx;//也可以这样获取配置参数\r\n            //在这里实现发送内容短信，即直接发送内容\r\n            ...\r\n            //切记将发送结果存入到$this->result\r\n            $this->result['success'] = false;//是否发送成功\r\n            $this->result['info'] = $this->currentAgentName . ':' . '发送结果说明';//发送结果信息说明\r\n            $this->result['code'] = $code;//发送结果代码\r\n        }\r\n\r\n        //override\r\n        //发送短信二级入口：发送模板短信\r\n        public function sendTemplateSms($tempId, $to, Array $data)\r\n        {\r\n            //同上...\r\n        }\r\n\r\n        //override\r\n        //发送语音验证码\r\n        public function voiceVerify($to, $code)\r\n        {\r\n            //同上...\r\n            //与发送短信唯一不同的是，切记返回结果数组\r\n            return $this->result;\r\n        }\r\n   }\r\n```\r\n至此, 新加代理器成功!\r\n\r\n##License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}